# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# How do I allow non-mandatory params
# How do I pass params from external input
parameters:

- name: processName
  type: string
  default: ""
  
- name: componentId
  type: string
  default: ""

- name: componentType
  type: string
  default: 'process'

- name: componentVersion
  type: string
  default: 'NA'

- name: notes
  type: string
  default: ''

- name: packageVersion
  type: string

- name: extractComponentXmlFolder
  type: string
  default: 'true'

- name: tag
  type: string
  default: 'true'  

- name: listenerStatus
  type: string
  default: 'RUNNING'



variables:
- group: boomicicd

# need a new image with SonarRunner and xmllint (libxml2-utils) and jq
pool:
  vmImage: 'ubuntu-latest'

steps:

- script: |
    # Don't have to do this if the image comes preloaded with this package
    sudo apt-get install -y libxml2-utils
    cd cli/scripts
    # This set the variables used in Azure DevOps pipeline.
    # Mostly constants
    export h1="$(h1)"
    export h2="$(h2)"
    export WORKSPACE=$(pwd)

    # Get values from user or parameter store
    # The following credentials can be stored in parameter store and retrieved dynamically
    # Example to retrieve form an AWS store "$(aws ssm get-parameter --region xx --with-decryption --output text --query Parameter.Value --name /Parameter.name)
    export accountName="$(accountName)"
    export accountId=$(accountId)
    export authToken=$(authToken)
    export gitComponentRepoURL="$(gitComponentRepoURL)"
    export gitComponentUserName="$(gitComponentUserName)"
    export gitComponentUserEmail="$(gitComponentUserEmail)"
    export sonarHostURL="$(sonarHostURL)"
    export sonarHostToken="$(sonarHostToken)"
    export sonarProjectKey="$(sonarProjectKey)"
    export gitComponentRepoName="$(gitComponentRepoName)" # Top level folder of the GIT REPO
    export gitComponentCommitPath="$(gitComponentCommitPath)" # export gitComponentCommitPath="?version=GBmaster&path=" this is used in code review report
    export sonarRulesFile="$(sonarRulesFile)"

    # Keys that can change
    export VERBOSE="$(VERBOSE)" # Bash verbose output; set to true only for testing, will slow execution.
    export SLEEP_TIMER="$(SLEEP_TIMER)" # Delays curl request to the platform to set the rate under 5 requests/second
    export gitComponentOption="$(gitComponentOption)" # This clones the repo; else default is to create a release tag. Check gitComponentPush.sh file
    export SONAR_HOST=""  # If sonar scanner is installed locally then will use the local sonar scanner. Check the sonarScanner.sh file

    # Derived keys
    export baseURL=https://api.boomi.com/api/rest/v1/$accountId
    export regressionTestURL="$(regressionTestURL)" # URL for regression test suite framework.
    echo "Base URL is ${baseURL}"

    source bin/createPackage.sh \
      processName="${{ parameters.processName }}" \
      componentId="${{ parameters.componentId }}" \
      componentType=${{ parameters.componentType }} \
      componentVersion=${{ parameters.componentVersion }} \
      packageVersion="${{ parameters.packageVersion }}" \
      notes="${{ parameters.notes }}" \
      extractComponentXmlFolder="${{ parameters.extractComponentXmlFolder }}" \
      tag="${{ parameters.tag }}" \
      listenerStatus=${{ parameters.listenerStatus }}
    
  displayName: 'Boomi Create Package'
